import 'package:flutter/material.dart';
import '../constants/colors.dart';

import '../services/auth_service.dart';
import '../services/database_service.dart';
import '../models/community_model.dart';

class CreateCommunityScreen extends StatefulWidget {
  const CreateCommunityScreen({super.key});

  @override
  State<CreateCommunityScreen> createState() => _CreateCommunityScreenState();
}

class _CreateCommunityScreenState extends State<CreateCommunityScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  String _selectedCategory = 'Allgemein';
  bool _isPublic = true;

  final List<String> _categories = [
    'Allgemein',
    'Sport',
    'Musik',
    'Kunst',
    'Technik',
    'Bücher',
    'Haushalt',
    'Familie',
    'Nachbarschaft',
    'Sonstiges',
  ];

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _createCommunity() async {
    if (_formKey.currentState!.validate()) {
      // Implement community creation with Supabase
      try {
        final currentUser = AuthService.getCurrentUser();
        if (currentUser != null) {
          final community = CommunityModel(
            id: '', // Will be generated by Supabase
            name: _nameController.text,
            description: _descriptionController.text,
            category: _selectedCategory,
            isPublic: _isPublic,
            createdBy: currentUser.id,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          );

          final createdCommunity =
              await DatabaseService.createCommunity(community);
          if (createdCommunity != null) {
            if (!mounted) return;
            Navigator.pop(context, createdCommunity);
          }
        }
      } catch (e) {
        debugPrint('❌ Fehler beim Erstellen der Community: $e');
        if (!mounted) return;
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
                content: Text('Fehler beim Erstellen der Community')),
          );
        }
      }
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Community wird erstellt...'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.pop(context);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Neue Gruppe erstellen'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Name
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Gruppenname',
                  hintText: 'z. B. Zermatt Snowboarder',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Bitte gib einen Gruppennamen ein';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 16),

              // Description
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                  labelText: 'Beschreibung',
                  hintText: 'Beschreibe deine Gruppe...',
                  border: OutlineInputBorder(),
                ),
                maxLines: 3,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Bitte gib eine Beschreibung ein';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 16),

              // Category
              DropdownButtonFormField<String>(
                value: _selectedCategory,
                decoration: const InputDecoration(
                  labelText: 'Kategorie',
                  border: OutlineInputBorder(),
                ),
                items: _categories.map((category) {
                  return DropdownMenuItem(
                    value: category,
                    child: Text(category),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedCategory = value!;
                  });
                },
              ),

              const SizedBox(height: 16),

              // Privacy
              SwitchListTile(
                title: const Text('Öffentliche Gruppe'),
                subtitle: const Text('Jeder kann beitreten'),
                value: _isPublic,
                onChanged: (value) {
                  setState(() {
                    _isPublic = value;
                  });
                },
              ),

              const SizedBox(height: 24),

              // Create Button
              ElevatedButton(
                onPressed: _createCommunity,
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primary,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                child: const Text(
                  'Gruppe erstellen',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
